"use client"

import React, { useEffect, useState } from "react"
import { usePublishedNotices } from "../../hooks/useNotices"
import { ContentModal } from "./ContentModal"

const NoticeModalManager: React.FC = () => {
  const { data: allNotices, isLoading, error } = usePublishedNotices()
  const [currentModalIndex, setCurrentModalIndex] = useState(0)
  const [closedToday, setClosedToday] = useState<string[]>([])
  const [allModalsClosed, setAllModalsClosed] = useState(false)

  // isModalÏù¥ trueÏù∏ Í≥µÏßÄÏÇ¨Ìï≠Îßå ÌïÑÌÑ∞ÎßÅ
  const modalNotices =
    allNotices?.filter((notice) => notice.isModal === true) || []

  // ÏûÑÏãú ÌÖåÏä§Ìä∏Ïö© ÎçîÎØ∏ Îç∞Ïù¥ÌÑ∞
  const dummyModalNotice = {
    _id: "test-modal-1",
    title: "ÌÖåÏä§Ìä∏ Î™®Îã¨ Í≥µÏßÄÏÇ¨Ìï≠",
    content: "Ïù¥Í≤ÉÏùÄ ÌÖåÏä§Ìä∏Ïö© Î™®Îã¨ Í≥µÏßÄÏÇ¨Ìï≠ÏûÖÎãàÎã§.",
    isModal: true,
    isPublished: true,
    createdAt: new Date().toISOString(),
    attachments: [],
  }

  // ÌÖåÏä§Ìä∏: modalNoticesÍ∞Ä ÎπÑÏñ¥ÏûàÏúºÎ©¥ ÎçîÎØ∏ Îç∞Ïù¥ÌÑ∞ ÏÇ¨Ïö©
  const finalModalNotices =
    modalNotices.length > 0 ? modalNotices : [dummyModalNotice]

  // ÎîîÎ≤ÑÍπÖÏùÑ ÏúÑÌïú Î°úÍ∑∏
  console.log("NoticeModalManager - allNotices:", allNotices)
  console.log("NoticeModalManager - modalNotices:", modalNotices)
  console.log("NoticeModalManager - finalModalNotices:", finalModalNotices)
  console.log("NoticeModalManager - isLoading:", isLoading)
  console.log("NoticeModalManager - error:", error)

  useEffect(() => {
    // Î°úÏª¨Ïä§ÌÜ†Î¶¨ÏßÄÏóêÏÑú Ïò§Îäò Îã´ÏùÄ Î™®Îã¨ Î™©Î°ù Î∂àÎü¨Ïò§Í∏∞
    const today = new Date().toDateString()
    const stored = localStorage.getItem(`closedModals_${today}`)
    if (stored) {
      setClosedToday(JSON.parse(stored))
    }
  }, [])

  // Î°úÎî© Ï§ëÏù¥Í±∞ÎÇò Îç∞Ïù¥ÌÑ∞Í∞Ä ÏóÜÍ±∞ÎÇò Î™®Îì† Î™®Îã¨Ïù¥ Îã´ÌòîÏúºÎ©¥ ÏïÑÎ¨¥Í≤ÉÎèÑ Î†åÎçîÎßÅÌïòÏßÄ ÏïäÏùå
  if (isLoading || !finalModalNotices || finalModalNotices.length === 0) {
    console.log(
      "Not rendering modal - isLoading:",
      isLoading,
      "finalModalNotices:",
      finalModalNotices?.length
    )
    return null
  }

  if (allModalsClosed) {
    console.log("All modals closed - not rendering")
    return null
  }

  const currentNotice = finalModalNotices[currentModalIndex]
  const isModalOpen = Boolean(
    currentNotice && !closedToday.includes(currentNotice._id)
  )

  // Îçî ÏûêÏÑ∏Ìïú ÎîîÎ≤ÑÍπÖ Î°úÍ∑∏
  console.log("Current notice:", currentNotice)
  console.log("Closed today:", closedToday)
  console.log("Is modal open:", isModalOpen)
  console.log("Current modal index:", currentModalIndex)
  console.log("All modals closed:", allModalsClosed)

  const handleCloseModal = () => {
    console.log(
      "handleCloseModal called - currentModalIndex:",
      currentModalIndex,
      "total modals:",
      finalModalNotices.length
    )

    if (currentModalIndex < finalModalNotices.length - 1) {
      // Îã§Ïùå Î™®Îã¨Ïù¥ ÏûàÏúºÎ©¥ Îã§Ïùå Î™®Îã¨Î°ú
      setCurrentModalIndex(currentModalIndex + 1)
      console.log("Moving to next modal:", currentModalIndex + 1)
    } else {
      // ÎßàÏßÄÎßâ Î™®Îã¨Ïù¥Î©¥ Î™®Îì† Î™®Îã¨ Îã´Í∏∞
      console.log("Closing all modals")
      setAllModalsClosed(true)
    }
  }

  const handleCloseToday = () => {
    if (currentNotice) {
      console.log("handleCloseToday called for notice:", currentNotice._id)
      const today = new Date().toDateString()
      const newClosedToday = [...closedToday, currentNotice._id]
      setClosedToday(newClosedToday)

      // Î°úÏª¨Ïä§ÌÜ†Î¶¨ÏßÄÏóê Ï†ÄÏû•
      localStorage.setItem(
        `closedModals_${today}`,
        JSON.stringify(newClosedToday)
      )

      handleCloseModal()
    }
  }

  if (!isModalOpen || !currentNotice) {
    return null
  }

  return (
    <ContentModal
      isOpen={isModalOpen}
      onClose={handleCloseModal}
      title={currentNotice.title}
      content={currentNotice.content}
      attachments={currentNotice.attachments || []}
      badge="üì¢ Í≥µÏßÄÏÇ¨Ìï≠"
      showTodayClose={true}
      onCloseToday={handleCloseToday}
    />
  )
}

export default NoticeModalManager
